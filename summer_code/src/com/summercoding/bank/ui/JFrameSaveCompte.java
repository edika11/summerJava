/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.summercoding.bank.ui;

import com.summercoding.bank.controlleur.Controller;
import com.summercoding.bank.entities.Admin;
import com.summercoding.bank.entities.Compte;
import com.summercoding.bank.entities.Utilisateur;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Edika Edmond Junior
 */
public class JFrameSaveCompte extends javax.swing.JFrame {

    //Creation de l'objet controller
    Controller controller = new Controller();
    
    //Action necessaire pour qui initialiser ce JFrame (Add, update)
    String quelleAction;
    
    JFrameHome homePage;
    /**
     * Creates new form JFrameSaveCompte
     * @param action
     * @param idCompte
     * @param hp
     */
    public JFrameSaveCompte(String action, int idCompte, JFrameHome hp) {
        initComponents();
        initOtherComponents();
        
        quelleAction = action;
        homePage = hp;
        
        if(quelleAction.equalsIgnoreCase("Add")){ //Cas de l'action Add
            //On efface le champ IdaCompte et son label ainsi les boutons update et delete
            labelIdCompte.setVisible(false);
            champIdCompte.setVisible(false);
            boutonDelete.setVisible(false);
            boutonUpdate.setVisible(false);
        }
        else{
            if(quelleAction.equalsIgnoreCase("Update")){ //Cas de l'action Update
                buttonAdd.setVisible(false);
                try {
                Compte compte = controller.routeVersGetCompteByIdCompte(idCompte);
                
                champIdCompte.setText(compte.getIdCompte()+"");
                champSolde.setText(compte.getSolde()+"");
                
                Utilisateur utilisateur = controller.routeVersGetUtilisateurByIdUser(compte.getIdUser());
                comboBoxUser.setSelectedItem(utilisateur.getIdUser() + " " + utilisateur.getLogin());
                
                comboBoxAdmin.setEnabled(true);
                Admin admin = controller.routeVersGetAdminByIdAdmin(compte.getIdAdmin());
                comboBoxAdmin.setSelectedItem(admin.getIdAdmin() + " " + admin.getLogin());
                
                } catch (SQLException ex) {
                    Logger.getLogger(JFrameSaveCompte.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        
    }
    
    private void initOtherComponents(){
        try {
            //Initialissation de la liste des idUser
            for(Utilisateur utilisateur : controller.routeVersAllUtilisateur() ){
                comboBoxUser.addItem(utilisateur.getIdUser() + " " + utilisateur.getLogin());
            }
            
            //Initialisation de la liste des idAdmin
            for(Admin admin: controller.routeVerslistAllAdmin()){
                comboBoxAdmin.addItem(admin.getIdAdmin() + " " + admin.getLogin());
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(JFrameSaveCompte.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        comboBoxAdmin.setEnabled(false);
        choixIdAdminSelonIdUser();
        
    }
    
    //Selectionner automatiquement l'idAdmin selon l'idUser selectionné
    private void choixIdAdminSelonIdUser(){
        try {
            String idUserString = comboBoxUser.getSelectedItem().toString().split(" ")[0];
            int idUser = Integer.parseInt(idUserString);
            
            //Recuperation de l'utilisateur
            Utilisateur utilisateur = controller.routeVersGetUtilisateurByIdUser(idUser);
            
            //Recuperation de l'admin correspondant à l'utilisateur
            Admin admin = controller.routeVersGetAdminByIdAdmin(utilisateur.getIdAdmin());
            
            //Remplissage du comboBox de idAdmin avec l'admin coreespondant à l'utilisateur
            comboBoxAdmin.setSelectedItem(admin.getIdAdmin() + " " + admin.getLogin());
        } catch (SQLException ex) {
            Logger.getLogger(JFrameSaveCompte.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        champSolde = new javax.swing.JTextField();
        buttonCancel = new javax.swing.JButton();
        buttonAdd = new javax.swing.JButton();
        comboBoxUser = new javax.swing.JComboBox<>();
        comboBoxAdmin = new javax.swing.JComboBox<>();
        boutonDelete = new javax.swing.JButton();
        boutonUpdate = new javax.swing.JButton();
        labelIdCompte = new javax.swing.JLabel();
        champIdCompte = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Solde");

        jLabel2.setText("idUser");

        jLabel3.setText("idAdmin");

        buttonCancel.setText("Cancel");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        buttonAdd.setText("Add");
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });

        comboBoxUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxUserActionPerformed(evt);
            }
        });

        boutonDelete.setText("Delete");
        boutonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonDeleteActionPerformed(evt);
            }
        });

        boutonUpdate.setText("Update");
        boutonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonUpdateActionPerformed(evt);
            }
        });

        labelIdCompte.setText("idCompte");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(buttonCancel)
                        .addGap(31, 31, 31)
                        .addComponent(boutonDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addComponent(boutonUpdate)
                        .addGap(37, 37, 37)
                        .addComponent(buttonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(labelIdCompte))
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(champSolde)
                            .addComponent(comboBoxUser, 0, 284, Short.MAX_VALUE)
                            .addComponent(comboBoxAdmin, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(champIdCompte))))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(champSolde, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(comboBoxUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(comboBoxAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelIdCompte)
                    .addComponent(champIdCompte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonCancel)
                    .addComponent(boutonDelete)
                    .addComponent(boutonUpdate)
                    .addComponent(buttonAdd))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Fonction du bouton add
    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        try{                                         
            String soldeString = champSolde.getText();
            double solde = 0; 
            
            if(soldeString.equals("")){ //SI le champ du solde est vide
                JOptionPane.showMessageDialog(null, "Veuillez compléter le champ du solde");
            }
            else{   
                try{
                    solde = Double.parseDouble(soldeString);
                }catch(NumberFormatException ex){
                    Logger.getLogger(JFrameSaveCompte.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null, "Veuillez sasir correctement le solde");
                    return;
                }
                
                String idUserString = comboBoxUser.getSelectedItem().toString().split(" ")[0];
                int idUser = Integer.parseInt(idUserString);

                String idAdminString = comboBoxAdmin.getSelectedItem().toString().split(" ")[0];
                int idAdmin = Integer.parseInt(idAdminString);

                //Check pour savoir si ce compte existe déjà
                List<Compte> listCompte = controller.routeVersAllCompte();
                for(Compte compte : listCompte){
                    if(compte.getIdUser() == idUser){
                        JOptionPane.showMessageDialog(null, "Ce compte existe déjà");
                        return;
                    }
                }
                //Enregistrement
                controller.routeVersSaveCompte(solde, idUser, idAdmin);

                //Reset des champs
                champSolde.setText("");

                this.dispose();

                //Mise à jour de la table des comptes
                refreshTable();
            }   
        }catch(SQLException ex){
            Logger.getLogger(JFrameSaveCompte.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Veuillez reessayer plus tard");
        }
    }//GEN-LAST:event_buttonAddActionPerformed

    //Fonction du bouton cancel
    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_buttonCancelActionPerformed

    //Fcontion appelé lorsqu'on choisit un utilisateur dans le comboBox
    private void comboBoxUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxUserActionPerformed
        choixIdAdminSelonIdUser();
    }//GEN-LAST:event_comboBoxUserActionPerformed

    //Fcontion du bouton update
    private void boutonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonUpdateActionPerformed
        try{                                         
            String soldeString = champSolde.getText();
            String idCompteString = champIdCompte.getText();
            
            double solde; 
            int idCompte;
            try{
                solde = Double.parseDouble(soldeString);
                idCompte = Integer.parseInt(idCompteString);
            }catch(NumberFormatException ex){
                Logger.getLogger(JFrameSaveCompte.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "solde ou idCompte incorrect");
                return;
            }
            
            String idUserString = comboBoxUser.getSelectedItem().toString().split(" ")[0];
            int idUser = Integer.parseInt(idUserString);
            
            String idAdminString = comboBoxAdmin.getSelectedItem().toString().split(" ")[0];
            int idAdmin = Integer.parseInt(idAdminString);
            
            //Update
            controller.routeVersUpdateCompte(idCompte, solde, idUser, idAdmin);
           
            //Reset des champs
            champSolde.setText("");
            
            this.dispose();
            
            //Mise à jour de la table qui affiche les comptes
            refreshTable();
            
        }catch(SQLException ex){
            Logger.getLogger(JFrameSaveCompte.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Veuillez reessayer plus tard");
        }
    
    }//GEN-LAST:event_boutonUpdateActionPerformed

    //Fonction du bouton delete
    private void boutonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonDeleteActionPerformed
        try {
            String idCompteString = champIdCompte.getText();
            int idCompte = Integer.parseInt(idCompteString);
            
            //Suppression
            controller.routeVersDeleteCompte(idCompte);
            
            this.dispose();
            
            //Mise à jour de la table qui affiche les comptes
            refreshTable();
        } catch (SQLException ex) {
            Logger.getLogger(JFrameSaveCompte.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_boutonDeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameSaveCompte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameSaveCompte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameSaveCompte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameSaveCompte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameSaveCompte("Add", 0, null).setVisible(true);
            }
        });
    }
    
    //Fonction qui permet d'actualiser la table qui affiche la liste des comptes dans le homePage apres chaque Add ou Update
    private void refreshTable() throws SQLException{
        List<Compte> listCompte = controller.routeVersAllCompte();
            
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("Id");
            model.addColumn("IdUser");
            model.addColumn("IdAdmin");
            model.addColumn("Solde");
            
            
            for(Compte compte : listCompte){
                model.addRow(new String[]{compte.getIdCompte()+"", compte.getIdUser()+"", compte.getIdAdmin()+"", compte.getSolde()+""});
            }
            
            homePage.setQuelMenu("Compte");
            homePage.getTable().setModel(model);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton boutonDelete;
    private javax.swing.JButton boutonUpdate;
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonCancel;
    private javax.swing.JTextField champIdCompte;
    private javax.swing.JTextField champSolde;
    private javax.swing.JComboBox<String> comboBoxAdmin;
    private javax.swing.JComboBox<String> comboBoxUser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel labelIdCompte;
    // End of variables declaration//GEN-END:variables
}
