/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.summercoding.bank.ui;

import com.summercoding.bank.controlleur.Controller;
import com.summercoding.bank.entities.Compte;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Edika Edmond Junior
 */
public class JFrameActionOnCompte extends javax.swing.JFrame {

    //Controleur
    Controller controller = new Controller();
    
    //Action qu'on souhaite effectuer sur le compte
    String actionSurLeCompte;
    
    //HomePage à partir duquel on vient
    JFrameHome homePage;
    
    //Personne voulant effectuer l'action
    String personneEffectuantAction; //Admin ou user
    
    /**
     * Creates new form JFrameActionCompte
     * @param action
     * @param hp
     */
    public JFrameActionOnCompte(String action, JFrameHome hp) {
        initComponents();
        
        actionSurLeCompte = action;
        homePage = hp;
        
        if(actionSurLeCompte.equals("depot")){
            labelSenderIdCompte.setVisible(false);
            champSenderIdCompte.setVisible(false);
            labelReceiverIdCompte.setText("idCompte");
            
            if(homePage.getLoginStatus().equalsIgnoreCase("user")){
                try {
                    Compte compte = controller.routeVersGetCompteByIdUser(homePage.getLoginUtilisateur().getIdUser());
                    champReceiverIdCompte.setText(compte.getIdCompte()+"");
                    champReceiverIdCompte.setEnabled(false);
                } catch (SQLException ex) {
                    Logger.getLogger(JFrameActionOnCompte.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        else{
            if(actionSurLeCompte.equals("retrait")){
                labelReceiverIdCompte.setVisible(false);
                champReceiverIdCompte.setVisible(false);
                labelSenderIdCompte.setText("idCompte");
                
                if(homePage.getLoginStatus().equalsIgnoreCase("user")){
                    try {
                        Compte compte = controller.routeVersGetCompteByIdUser(homePage.getLoginUtilisateur().getIdUser());
                        champSenderIdCompte.setText(compte.getIdCompte()+"");
                        champSenderIdCompte.setEnabled(false);
                    } catch (SQLException ex) {
                        Logger.getLogger(JFrameActionOnCompte.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            else{
                if(actionSurLeCompte.equals("virement")){
                   if(homePage.getLoginStatus().equalsIgnoreCase("user")){
                        try {
                            Compte compte = controller.routeVersGetCompteByIdUser(homePage.getLoginUtilisateur().getIdUser());
                            champSenderIdCompte.setText(compte.getIdCompte()+"");
                            champSenderIdCompte.setEnabled(false);
                        } catch (SQLException ex) {
                            Logger.getLogger(JFrameActionOnCompte.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } 
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelSenderIdCompte = new javax.swing.JLabel();
        labelReceiverIdCompte = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        champSenderIdCompte = new javax.swing.JTextField();
        champReceiverIdCompte = new javax.swing.JTextField();
        champMontant = new javax.swing.JTextField();
        buttonCancel = new javax.swing.JButton();
        buttonApply = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelSenderIdCompte.setText("Sender's idCompte");

        labelReceiverIdCompte.setText("Receiver's idCompte");

        jLabel3.setText("Montant");

        buttonCancel.setText("Cancel");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        buttonApply.setText("Apply");
        buttonApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonApplyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelReceiverIdCompte, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelSenderIdCompte, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(champSenderIdCompte)
                            .addComponent(champReceiverIdCompte)
                            .addComponent(champMontant, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                        .addComponent(buttonApply)
                        .addGap(68, 68, 68))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSenderIdCompte)
                    .addComponent(champSenderIdCompte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelReceiverIdCompte)
                    .addComponent(champReceiverIdCompte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(champMontant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(94, 94, 94)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonCancel)
                    .addComponent(buttonApply))
                .addContainerGap(103, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Fonction du bouton Apply
    private void buttonApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonApplyActionPerformed

        String montantString = champMontant.getText();
        double montant;
        
        if(montantString.equals("")){
            JOptionPane.showMessageDialog(null, "Veuillez compléter le champ réservé au montant");
            //On sort de la fonction
            return;
        }
        else{
            try{
                montant = Double.parseDouble(montantString);
            }
            catch(NumberFormatException ex){
                Logger.getLogger(JFrameActionOnCompte.class.getName()).log(Level.SEVERE,null, ex);
                JOptionPane.showMessageDialog(null, "Valeur du montant incorrecte");
                //On sort de la fonction
                return;
            }
        }
        
        if(actionSurLeCompte.equals("depot")){ //Cas d'un dépôt
            try{
                String receiverIdCompteString = champReceiverIdCompte.getText();
                int receiverIdCompte=0;
                
                if(receiverIdCompteString.equals("")){
                    JOptionPane.showMessageDialog(null, "Veuillez compléter le champ réservé à l'id du compte");
                    //On sort de la fonction
                    return;
                }
                else{
                    try{
                        receiverIdCompte = Integer.parseInt(receiverIdCompteString);   
                    }
                    catch(NumberFormatException ex){
                        Logger.getLogger(JFrameActionOnCompte.class.getName()).log(Level.SEVERE,null, ex);
                        JOptionPane.showMessageDialog(null, "valeur de l'id de compte incorrecte");
                        //On sort de la fonction
                        return;
                    }
                }
                
                //On recupere le compte correspondant pour effectuer l'operation
                Compte compte = controller.routeVersGetCompteByIdCompte(receiverIdCompte);
                
                if(compte == null){
                    JOptionPane.showMessageDialog(null, "Compte inexistant, veuillez vérifier l'id du compte");
                    //On sort de la fonction
                    return;
                }
                else{
                    controller.routeVersUpdateCompte(compte.getIdCompte(), montant + compte.getSolde(), compte.getIdUser(), compte.getIdAdmin());
                    JOptionPane.showMessageDialog(null, "Dépôt effectué avec succès");

                    this.dispose();

                    if(homePage.getLoginStatus().equals("user")){
                        homePage.afficheInfoCompteClient();
                    }
                    else{// cas d'un admin
                        refreshTable();
                    }
                    
                }  
            }
            catch(SQLException ex){
                Logger.getLogger(JFrameActionOnCompte.class.getName()).log(Level.SEVERE,null, ex);
                JOptionPane.showMessageDialog(null, "Erreur, veuillez reessayer");
            }
        }
        else{
            if(actionSurLeCompte.equals("retrait")){ // Cas d'un retrait
                try {
                    String senderIdCompteString = champSenderIdCompte.getText();
                    int senderIdCompte = 0;
                    
                    if(senderIdCompteString.equals("")){
                        JOptionPane.showMessageDialog(null, "Veuillez compléter le champ réservé à l'id du compte");
                    }
                    else{
                        try{
                            senderIdCompte = Integer.parseInt(senderIdCompteString);
                        }
                        catch(NumberFormatException ex){
                            Logger.getLogger(JFrameActionOnCompte.class.getName()).log(Level.SEVERE,null, ex);
                            JOptionPane.showMessageDialog(null, "valeur de l'id de compte incorrecte");
                            //On sort de la fonction
                            return;
                        }
                    }
                    
                    //On recupere le compte correspondant pour effectuer l'operation
                    Compte compte = controller.routeVersGetCompteByIdCompte(senderIdCompte);
                    
                    if(compte == null){
                        JOptionPane.showMessageDialog(null, "Compte inexistant, veuillez vérifier l'id du compte");
                        //On sort de la fonction
                        return;
                    }
                    else{
                        controller.routeVersUpdateCompte(compte.getIdCompte(), compte.getSolde() - montant, compte.getIdUser(), compte.getIdAdmin());
                        JOptionPane.showMessageDialog(null, "Retrait effectué avec succès");

                        this.dispose();

                        if(homePage.getLoginStatus().equals("user")){
                            homePage.afficheInfoCompteClient();
                        }
                        else{// cas d'un admin
                            refreshTable();
                        }
                    } 
                } catch (SQLException ex) {
                    Logger.getLogger(JFrameActionOnCompte.class.getName()).log(Level.SEVERE, null, ex);
                }  
            }
            else{
                if(actionSurLeCompte.equals("virement")){ 
                    try {
                        //Cas d'un virement
                        String receiverIdCompteString = champReceiverIdCompte.getText();
                        int receiverIdCompte=0;

                        if(receiverIdCompteString.equals("")){
                            JOptionPane.showMessageDialog(null, "Veuillez compléter le champ réservé à Receiver's idCompte");
                            //On sort de la fonction
                            return;
                        }
                        else{
                            try{
                                receiverIdCompte = Integer.parseInt(receiverIdCompteString);   
                            }
                            catch(NumberFormatException ex){
                                Logger.getLogger(JFrameActionOnCompte.class.getName()).log(Level.SEVERE,null, ex);
                                JOptionPane.showMessageDialog(null, "valeur de l'id de compte incorrecte");
                                //On sort de la fonction
                                return;
                            }
                        }

                        String senderIdCompteString = champSenderIdCompte.getText();
                        int senderIdCompte = 0;

                        if(senderIdCompteString.equals("")){
                            JOptionPane.showMessageDialog(null, "Veuillez compléter le champ réservé à Sender's idCompte");
                        }
                        else{
                            try{
                                senderIdCompte = Integer.parseInt(senderIdCompteString);
                            }
                            catch(NumberFormatException ex){
                                Logger.getLogger(JFrameActionOnCompte.class.getName()).log(Level.SEVERE,null, ex);
                                JOptionPane.showMessageDialog(null, "valeur de l'id de compte incorrecte");
                                //On sort de la fonction
                                return;
                            }
                        }

                        Compte compteEnvoyeur = controller.routeVersGetCompteByIdCompte(senderIdCompte);
                        Compte compteRecepteur = controller.routeVersGetCompteByIdCompte(receiverIdCompte);
                        
                        if(compteEnvoyeur == null){
                            JOptionPane.showMessageDialog(null, "Compte de envoyeur inexistant, veuillez vérifier l'id du compte");
                            //On sort de la fonction
                            return;
                        }
                        else{
                            if(compteRecepteur == null){
                                JOptionPane.showMessageDialog(null, "Compte récepteur inexistant, veuillez vérifier l'id du compte");
                                //On sort de la fonction
                                return;
                            }
                            else{
                                controller.routeVersUpdateCompte(compteRecepteur.getIdCompte(), compteRecepteur.getSolde() + montant, compteRecepteur.getIdUser(), compteRecepteur.getIdAdmin());
                                controller.routeVersUpdateCompte(compteEnvoyeur.getIdCompte(), compteEnvoyeur.getSolde() - montant, compteEnvoyeur.getIdUser(), compteEnvoyeur.getIdAdmin());

                                JOptionPane.showMessageDialog(null, "Transaction effectuée avec succès");

                                this.dispose();

                                if(homePage.getLoginStatus().equals("user")){
                                    homePage.afficheInfoCompteClient();
                                }
                                else{// cas d'un admin
                                    refreshTable();
                                }
                            }
                        } 
                    } 
                    catch (SQLException ex) {
                        Logger.getLogger(JFrameActionOnCompte.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(null, "Erreur, transaction non effectuée. Veuillez reprendre la transaction");
                    }
                    
                    
                }
            }
        }
    }//GEN-LAST:event_buttonApplyActionPerformed

    //Fonction du bouton cancel
    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_buttonCancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameActionOnCompte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameActionOnCompte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameActionOnCompte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameActionOnCompte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameActionOnCompte("depot", null).setVisible(true);
            }
        });
    }
    
    //Fonction qui permet d'actualiser la table qui affiche la liste des comptes dans le homePage apres chaque Add ou Update
    private void refreshTable() throws SQLException{
        List<Compte> listCompte = controller.routeVersAllCompte();
            
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("Id");
            model.addColumn("IdUser");
            model.addColumn("IdAdmin");
            model.addColumn("Solde");
            
            
            for(Compte compte : listCompte){
                model.addRow(new String[]{compte.getIdCompte()+"", compte.getIdUser()+"", compte.getIdAdmin()+"", compte.getSolde()+""});
            }
            
            homePage.setQuelMenu("Compte");
            homePage.getTable().setModel(model);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonApply;
    private javax.swing.JButton buttonCancel;
    private javax.swing.JTextField champMontant;
    private javax.swing.JTextField champReceiverIdCompte;
    private javax.swing.JTextField champSenderIdCompte;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel labelReceiverIdCompte;
    private javax.swing.JLabel labelSenderIdCompte;
    // End of variables declaration//GEN-END:variables
}
