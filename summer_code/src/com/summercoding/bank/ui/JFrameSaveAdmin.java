/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.summercoding.bank.ui;

import com.summercoding.bank.controlleur.Controller;
import com.summercoding.bank.entities.Admin;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Edika Edmond Junior
 */
public class JFrameSaveAdmin extends javax.swing.JFrame {

    //Creation de l'objet controleur
    Controller controller = new Controller();
    
    //Action necessaire pour qui initialiser le JFrame (Add, update)
    String quelleAction;
    
    JFrameHome homePage;
    
    /**
     * Creates new form JFrameSaveAdmin
     * @param action
     * @param idAdmin
     * @param hp
     */
    public JFrameSaveAdmin(String action, int idAdmin, JFrameHome hp) {
        initComponents();
        
        homePage = hp;
        quelleAction = action;
        
        if(quelleAction.equalsIgnoreCase("Add")){ //Cas de l'action Add
            //On efface le champ Idadmin et son label ainsi les boutons update et delete
            buttonDelete.setVisible(false);
            buttonUpdate.setVisible(false);
            champIdAdmin.setVisible(false);
            labelIdAdmin.setVisible(false);
        }
        else{
            if(quelleAction.equalsIgnoreCase("Update")){ //Cas de l'action Update
                buttonAdd.setVisible(false);
                try {
                    //On va remplir les differents champs avec les parametres actuels pour visualisation avant modification
                    Admin admin = controller.routeVersGetAdminByIdAdmin(idAdmin);
                    
                    champLogin.setText(admin.getLogin());
                    champPassword.setText(admin.getPassword());
                    champNom.setText(admin.getNom());
                    champIdAdmin.setText(admin.getIdAdmin()+"");
                } catch (SQLException ex) {
                    Logger.getLogger(JFrameSaveAdmin.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        champLogin = new javax.swing.JTextField();
        champNom = new javax.swing.JTextField();
        champPassword = new javax.swing.JPasswordField();
        buttonCancel = new javax.swing.JButton();
        buttonAdd = new javax.swing.JButton();
        labelIdAdmin = new javax.swing.JLabel();
        champIdAdmin = new javax.swing.JTextField();
        buttonDelete = new javax.swing.JButton();
        buttonUpdate = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Login");

        jLabel2.setText("Passsword");

        jLabel3.setText("Nom");

        buttonCancel.setText("Cancel");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        buttonAdd.setText("Add");
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });

        labelIdAdmin.setText("idAdmin");

        buttonDelete.setText("Delete");
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });

        buttonUpdate.setText("Update");
        buttonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(labelIdAdmin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(champLogin, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                            .addComponent(champPassword)
                            .addComponent(champNom)
                            .addComponent(champIdAdmin)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(buttonCancel)
                        .addGap(35, 35, 35)
                        .addComponent(buttonDelete)
                        .addGap(34, 34, 34)
                        .addComponent(buttonUpdate)
                        .addGap(37, 37, 37)
                        .addComponent(buttonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(118, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(champLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(champPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(champNom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(champIdAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelIdAdmin))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 151, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonDelete)
                    .addComponent(buttonAdd)
                    .addComponent(buttonCancel)
                    .addComponent(buttonUpdate))
                .addGap(11, 11, 11))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Fonction du bouton Add
    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed

        try {
            String login = champLogin.getText();
            String password = champPassword.getText();
            String nom = champNom.getText();
            
            if(login.equals("") || password.equals("") || nom.equals("")){
                JOptionPane.showMessageDialog(null,"Veuillez completerer les informations manquantes");
            }
            else{
                if(controller.isEmailValid(login) == false){
                    JOptionPane.showMessageDialog(null,"Votre login doit être un email valide. exemple: something@gmail.com");
                }
                else{
                    if(controller.isPasswordValid(password) == false){
                        JOptionPane.showMessageDialog(null,"Password incorrect\n" +
                                 "- doit avoir une longueur minimale de 8 caracteres\n" +
                                  "- doit contenir au moins une minuscule\n" +
                                  "- doit contenir au moins une majuscule\n" +
                                  "- doit contenir au moins un chiffre\n" +
                                  "- doit contenir au moins un caractere special parmi !@#$%^&*");
                    }
                    else{
                        //Check pour pour voir si ce login n'est pas déjà pris
                        List<Admin> listAdmin = controller.routeVerslistAllAdmin();
                        for(Admin admin : listAdmin){
                            if(admin.getLogin().equals(login)){
                                JOptionPane.showMessageDialog(null,"Login déjà pris par un administrateur");
                                //On sort de la fontion sans faire de sauvegarde
                                return;
                            }
                        }

                        //Sauvegarde de l'admin
                        controller.routeVersSaveAdmin(login, password, nom);

                        //Reset des champs
                        champLogin.setText("");
                        champPassword.setText("");
                        champNom.setText("");

                        this.dispose();

                        //Mise à jour de la table des admins
                        refreshTable();
                    }
                } 
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(JFrameSaveAdmin.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Veuillez reessayer plus tard");
        }
    }//GEN-LAST:event_buttonAddActionPerformed

    //Fonction du bouton cancel
    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_buttonCancelActionPerformed

    //Fcontion du bouton update
    private void buttonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUpdateActionPerformed
        try{                                             
            String idAdminString = champIdAdmin.getText();
            int idAdmin;
            try{
                idAdmin = Integer.parseInt(idAdminString);
            }catch(NumberFormatException ex){
                Logger.getLogger(JFrameSaveAdmin.class.getName()).log(Level.SEVERE,null, ex);
                JOptionPane.showMessageDialog(null, "Veuillez saisir un id correct");
                return;
            }
            
            String login = champLogin.getText();
            String password = champPassword.getText();
            String nom = champNom.getText();
             
            if(controller.isEmailValid(login) == false){
                JOptionPane.showMessageDialog(null,"Votre login doit être un email valide. exemple: something@gmail.com");
            }
            else{
                if(controller.isPasswordValid(password) == false){
                    JOptionPane.showMessageDialog(null,"Password incorrect\n" +
                                 "- doit avoir une longueur minimale de 8 caracteres\n" +
                                  "- doit contenir au moins une minuscule\n" +
                                  "- doit contenir au moins une majuscule\n" +
                                  "- doit contenir au moins un chiffre\n" +
                                  "- doit contenir au moins un caractere special parmi !@#$%^&*");
                }
                else{
                    //Upadte de l'admin
                    controller.routeVersUpdateAdmin(idAdmin, login, password, nom);

                    this.dispose();

                    //Mise à jour de la table qui affiche les admin
                    refreshTable();
                }
            }
        }catch(SQLException ex){
            Logger.getLogger(JFrameSaveAdmin.class.getName()).log(Level.SEVERE,null, ex);
            JOptionPane.showMessageDialog(null, "Veuillez reessayer plus tard");
        }
        
    }//GEN-LAST:event_buttonUpdateActionPerformed

    //Fonction du bouton delete
    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
        String idAdminString = champIdAdmin.getText();
        int idAdmin = Integer.parseInt(idAdminString);
          
        try {
            //Suppression
            controller.routeVersDeleteAdmin(idAdmin);
            
            this.dispose();
            
            //Mise à jour de la table qui affiche les admin
            refreshTable();
        } catch (SQLException ex) {
            Logger.getLogger(JFrameSaveAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonDeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameSaveAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameSaveAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameSaveAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameSaveAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameSaveAdmin("Add",0,null).setVisible(true);
            }
        });
    }

    //Fonction qui permet d'actualiser la table qui affiche la liste des admin dans le homePage apres chaque Add ou Update
    private void refreshTable() throws SQLException{
        List<Admin> listAdmin = controller.routeVerslistAllAdmin();
        
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Id");
        model.addColumn("Nom");
        model.addColumn("Login");
        
        for(Admin admin: listAdmin){
            model.addRow(new String[]{admin.getIdAdmin()+"", admin.getNom(), admin.getLogin()});
        }
        
        homePage.setQuelMenu("Admin");
        homePage.getTable().setModel(model);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonUpdate;
    private javax.swing.JTextField champIdAdmin;
    private javax.swing.JTextField champLogin;
    private javax.swing.JTextField champNom;
    private javax.swing.JPasswordField champPassword;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel labelIdAdmin;
    // End of variables declaration//GEN-END:variables
}
