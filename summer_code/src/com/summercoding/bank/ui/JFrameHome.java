/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.summercoding.bank.ui;

import com.summercoding.bank.controlleur.Controller;
import com.summercoding.bank.entities.Admin;
import com.summercoding.bank.entities.Compte;
import com.summercoding.bank.entities.Utilisateur;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Edika Edmond Junior
 */
public class JFrameHome extends javax.swing.JFrame {

    //Controlleur
    Controller controller = new Controller();

    //Variable qui permet de savoir quelle fenetre d'informations à afficher (pour un admin, un utilisateur ou un compte)
    String quelMenu;
    
    //Variable qui permet d'identifier le statut de celui qui s'est connecté (admin ou utilisateur)
    String loginStatus;
    
    //Utilisateur qui s'est connecté lors du login
    Utilisateur loginUtilisateur;
    
    //Compte de l'utilisateur
    Compte compteDuLoginUtilisateur;
    
    /**
     * Creates new form JFrameHome
     * @param status
     * @param utilisateur
     */
    public JFrameHome(String status, Utilisateur utilisateur) {
        initComponents();
        
        loginStatus = status;
        loginUtilisateur = utilisateur;
        
        if(loginStatus.equalsIgnoreCase("admin")){
            menuItemInfosDuCompte.setVisible(false); ///Rubrique destinée à un utilisateur
        }
        else{
            if(loginStatus.equalsIgnoreCase("user")){
                menuAdmin.setVisible(false);
                menuUser.setVisible(false);
                menuItemCreerCompte.setVisible(false);
                menuItemListerCompte.setVisible(false);
                
                try {
                    //Initialisation du compte
                    Compte compte = new Compte();
                    compteDuLoginUtilisateur = compte.getCompteByIdUser(loginUtilisateur.getIdUser());
                    afficheInfoCompteClient();
                } catch (SQLException ex) {
                    Logger.getLogger(JFrameHome.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuAdmin = new javax.swing.JMenu();
        menuItemCreerAdmin = new javax.swing.JMenuItem();
        menuItemListerAdmin = new javax.swing.JMenuItem();
        menuUser = new javax.swing.JMenu();
        menuItemCreeruser = new javax.swing.JMenuItem();
        menuItemListerUser = new javax.swing.JMenuItem();
        menuCompte = new javax.swing.JMenu();
        menuItemCreerCompte = new javax.swing.JMenuItem();
        menuItemListerCompte = new javax.swing.JMenuItem();
        menuItemInfosDuCompte = new javax.swing.JMenuItem();
        menuItemDepot = new javax.swing.JMenuItem();
        menuItemRetrait = new javax.swing.JMenuItem();
        menuItemVirement = new javax.swing.JMenuItem();
        menuAPropos = new javax.swing.JMenu();
        menuAide = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 748, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        menuAdmin.setText("Admin");

        menuItemCreerAdmin.setText("Créer");
        menuItemCreerAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemCreerAdminActionPerformed(evt);
            }
        });
        menuAdmin.add(menuItemCreerAdmin);

        menuItemListerAdmin.setText("Lister");
        menuItemListerAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemListerAdminActionPerformed(evt);
            }
        });
        menuAdmin.add(menuItemListerAdmin);

        jMenuBar1.add(menuAdmin);

        menuUser.setText("User");

        menuItemCreeruser.setText("Créer");
        menuItemCreeruser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemCreeruserActionPerformed(evt);
            }
        });
        menuUser.add(menuItemCreeruser);

        menuItemListerUser.setText("Lister");
        menuItemListerUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemListerUserActionPerformed(evt);
            }
        });
        menuUser.add(menuItemListerUser);

        jMenuBar1.add(menuUser);

        menuCompte.setText("Compte");

        menuItemCreerCompte.setText("Créer");
        menuItemCreerCompte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemCreerCompteActionPerformed(evt);
            }
        });
        menuCompte.add(menuItemCreerCompte);

        menuItemListerCompte.setText("Lister");
        menuItemListerCompte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemListerCompteActionPerformed(evt);
            }
        });
        menuCompte.add(menuItemListerCompte);

        menuItemInfosDuCompte.setText("infos du compte");
        menuItemInfosDuCompte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemInfosDuCompteActionPerformed(evt);
            }
        });
        menuCompte.add(menuItemInfosDuCompte);

        menuItemDepot.setText("Dépôt");
        menuItemDepot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemDepotActionPerformed(evt);
            }
        });
        menuCompte.add(menuItemDepot);

        menuItemRetrait.setText("Retrait");
        menuItemRetrait.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemRetraitActionPerformed(evt);
            }
        });
        menuCompte.add(menuItemRetrait);

        menuItemVirement.setText("Virement");
        menuItemVirement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemVirementActionPerformed(evt);
            }
        });
        menuCompte.add(menuItemVirement);

        jMenuBar1.add(menuCompte);

        menuAPropos.setText("A propos");
        jMenuBar1.add(menuAPropos);

        menuAide.setText("Aide");
        jMenuBar1.add(menuAide);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Fonctoin de l'option creer de l'onglet admin
    private void menuItemCreerAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemCreerAdminActionPerformed
        new JFrameSaveAdmin("Add",0,this).setVisible(true);
    }//GEN-LAST:event_menuItemCreerAdminActionPerformed

    //Fonction de l'option lister de l'onglet admin
    private void menuItemListerAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemListerAdminActionPerformed
        
        quelMenu = "Admin";
        
        try {
            List<Admin> listAdmin = controller.routeVerslistAllAdmin();
            
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("Id");
            model.addColumn("Nom");
            model.addColumn("Login");
            
            for(Admin admin : listAdmin){
                model.addRow(new String[]{admin.getIdAdmin()+"", admin.getNom(), admin.getLogin()});
            }
            
            table.setModel(model);
        } catch (SQLException ex) {
            Logger.getLogger(JFrameHome.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuItemListerAdminActionPerformed

    //Fonction de l'option creer de l'onglet user
    private void menuItemCreeruserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemCreeruserActionPerformed
        new JFrameSaveUtilisateur("Add",0,this).setVisible(true);
    }//GEN-LAST:event_menuItemCreeruserActionPerformed

    //Fonction de l'option lister de l'onglet user
    private void menuItemListerUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemListerUserActionPerformed
        quelMenu = "Utilisateur";
        
        try {
            List<Utilisateur> listUtilisateur = controller.routeVersAllUtilisateur();
            
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("Id");
            model.addColumn("Nom");
            model.addColumn("Prenom");
            model.addColumn("Date de naissance");
            model.addColumn("Genre");
            model.addColumn("Login");
            model.addColumn("Password");
            model.addColumn("IdAdmin");
            
            for(Utilisateur utilisateur : listUtilisateur){
                model.addRow(new String[]{utilisateur.getIdUser()+"", utilisateur.getNom(), utilisateur.getPrenom(), utilisateur.getDateNaissance().toString(),utilisateur.getGenre(), utilisateur.getLogin(), utilisateur.getPassword(), utilisateur.getIdAdmin()+""});
            }
            
            table.setModel(model);
        } catch (SQLException ex) {
            Logger.getLogger(JFrameHome.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuItemListerUserActionPerformed

    //Fonction de l'option creer de l'onglet compte
    private void menuItemCreerCompteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemCreerCompteActionPerformed
        new JFrameSaveCompte("Add", 0, this).setVisible(true);
    }//GEN-LAST:event_menuItemCreerCompteActionPerformed

    //Fonction de l'option lister de l'onglet compte
    private void menuItemListerCompteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemListerCompteActionPerformed
        quelMenu = "Compte";
        
        try {
            List<Compte> listCompte = controller.routeVersAllCompte();
            
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("Id");
            model.addColumn("IdUser");
            model.addColumn("IdAdmin");
            model.addColumn("Solde");
            
            
            for(Compte compte : listCompte){
                model.addRow(new String[]{compte.getIdCompte()+"", compte.getIdUser()+"", compte.getIdAdmin()+"", compte.getSolde()+""});
            }
            
            table.setModel(model);
        } catch (SQLException ex) {
            Logger.getLogger(JFrameHome.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuItemListerCompteActionPerformed

    //Fonction appelée à chaque clic sur un element de la liste
    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        if(loginStatus.equalsIgnoreCase("user")){
            return; //On sort directement de la fonction
        }
        
        int numeroLigne = table.getSelectedRow();
        TableModel model = table.getModel();
        
        //Cas ou c'est un admin qui est selectionné
        if(quelMenu.equals("Admin")){
            String idAdminString = model.getValueAt(numeroLigne,0).toString();
            int idAdmin = Integer.parseInt(idAdminString);
            
            JFrameSaveAdmin JFrameSaveAdmin = new JFrameSaveAdmin("Update", idAdmin, this);
            JFrameSaveAdmin.setVisible(true);
        }
        else{
            //Cas ou c'est un utilisateur qui est selectionné
            if(quelMenu.equals("Utilisateur")){
                String idUserString = model.getValueAt(numeroLigne, 0).toString();
                int idUser = Integer.parseInt(idUserString);
                
                JFrameSaveUtilisateur JFrameSaveUtilisateur = new JFrameSaveUtilisateur("Update", idUser, this);
                JFrameSaveUtilisateur.setVisible(true);
            }
            else{ 
                if(quelMenu.equals("Compte")){ //Cas ou c'est un compte qui est selectionné
                    String idCompteString = model.getValueAt(numeroLigne, 0).toString();
                    int idCompte = Integer.parseInt(idCompteString);
                    
                    JFrameSaveCompte JFrameSaveCompte = new JFrameSaveCompte("Update", idCompte, this);
                    JFrameSaveCompte.setVisible(true);
                }
            }
        }
    }//GEN-LAST:event_tableMouseClicked

    //Fonction de l'option infos du compte de l'onglet compte
    private void menuItemInfosDuCompteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemInfosDuCompteActionPerformed
        afficheInfoCompteClient();
    }//GEN-LAST:event_menuItemInfosDuCompteActionPerformed

    //Fonction de l'option dépôt  de l'onglet Compte
    private void menuItemDepotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemDepotActionPerformed
        // on Appelle le JFrameActionOnCompte avec la mention depot
        new JFrameActionOnCompte("depot", this).setVisible(true);
    }//GEN-LAST:event_menuItemDepotActionPerformed

    //Fonction de l'option retrait  de l'onglet Compte
    private void menuItemRetraitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemRetraitActionPerformed
        // on Appelle le JFrameActionOnCompte avec la mention retrait
        new JFrameActionOnCompte("retrait", this).setVisible(true);
    }//GEN-LAST:event_menuItemRetraitActionPerformed

    //Fonction de l'option virement  de l'onglet Compte
    private void menuItemVirementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemVirementActionPerformed
        // on Appelle le JFrameActionOnCompte avec la mention virement
        new JFrameActionOnCompte("virement", this).setVisible(true);
    }//GEN-LAST:event_menuItemVirementActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameHome("admin", null).setVisible(true);
            }
        });
    }
    
    //Fonction qui remplit à l'ecran les informations concerant le compte du client
    public void afficheInfoCompteClient(){
        try {
            Compte compte = new Compte();
            compteDuLoginUtilisateur = compte.getCompteByIdUser(loginUtilisateur.getIdUser());
            
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("id Compte");
            model.addColumn("solde");
            model.addColumn("id propriétaire");
            model.addColumn("Propriétaire");
            
            model.addRow(new String[]{compteDuLoginUtilisateur.getIdCompte()+"", compteDuLoginUtilisateur.getSolde()+"", loginUtilisateur.getIdUser()+"", loginUtilisateur.getNom() + " "  + loginUtilisateur.getPrenom()});
            
            table.setModel(model);
        } catch (SQLException ex) {
            Logger.getLogger(JFrameHome.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    //getter et setter du JTable de ce JFrame
    public JTable getTable(){
        return table;
    }
    
    public void setTable(JTable table){
        this.table = table;
    }
   
    //Getter et setter de quelMenu
    public String getQuelMenu() {
        return quelMenu;
    }

    public void setQuelMenu(String quelMenu) {
        this.quelMenu = quelMenu;
    }

    //Getter et setter de  loginStatus
    public String getLoginStatus() {
        return loginStatus;
    }

    public void setLoginStatus(String loginStatus) {
        this.loginStatus = loginStatus;
    }

    //Getter et setter de loginUtilisateur
    public Utilisateur getLoginUtilisateur() {
        return loginUtilisateur;
    }

    public void setLoginUtilisateur(Utilisateur loginUtilisateur) {
        this.loginUtilisateur = loginUtilisateur;
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenu menuAPropos;
    private javax.swing.JMenu menuAdmin;
    private javax.swing.JMenu menuAide;
    private javax.swing.JMenu menuCompte;
    private javax.swing.JMenuItem menuItemCreerAdmin;
    private javax.swing.JMenuItem menuItemCreerCompte;
    private javax.swing.JMenuItem menuItemCreeruser;
    private javax.swing.JMenuItem menuItemDepot;
    private javax.swing.JMenuItem menuItemInfosDuCompte;
    private javax.swing.JMenuItem menuItemListerAdmin;
    private javax.swing.JMenuItem menuItemListerCompte;
    private javax.swing.JMenuItem menuItemListerUser;
    private javax.swing.JMenuItem menuItemRetrait;
    private javax.swing.JMenuItem menuItemVirement;
    private javax.swing.JMenu menuUser;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
