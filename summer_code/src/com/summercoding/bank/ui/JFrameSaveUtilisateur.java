/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.summercoding.bank.ui;

import com.summercoding.bank.controlleur.Controller;
import com.summercoding.bank.entities.Admin;
import com.summercoding.bank.entities.Utilisateur;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.Calendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Edika Edmond Junior
 */
public class JFrameSaveUtilisateur extends javax.swing.JFrame {

    //Creation de l'objet controleur
    Controller controller = new Controller();
    
    //Action necessaire pour qui initialiser ce JFrame (Add, update)
    String quelleAction;
    
    JFrameHome homePage;
  
    
    /**
     * Creates new form JFrameSaveUtilisateur
     * @param action
     * @param idUser
     * @param hp
     */
    public JFrameSaveUtilisateur(String action, int idUser, JFrameHome hp) {
        initComponents();
        initOtherComponents();
        
        quelleAction = action;
        homePage = hp;
        
        if(quelleAction.equals("Add")){ //Cas de l'action Add
            //On efface le champ Idadmin et son label ainsi les boutons update et delete
            buttonDelete.setVisible(false);
            buttonUpdate.setVisible(false);
            champIdUser.setVisible(false);
            labelIdUser.setVisible(false);
        }
        else{
            if(quelleAction.equals("Update")){ //Cas de l'action update
                try {
                    //On va remplir les differents champs avec les parametres actuels pour visualisation avant modification
                    Utilisateur utilisateur = controller.routeVersGetUtilisateurByIdUser(idUser);
                    
                    champLogin.setText(utilisateur.getLogin());
                    champPassword.setText(utilisateur.getPassword());
                    champNom.setText(utilisateur.getNom());
                    champPrenom.setText(utilisateur.getPrenom());
                    champIdUser.setText(utilisateur.getIdUser()+"");
                    
                    if(utilisateur.getGenre().equals("Masculin")){
                        radioButtonMasculin.setSelected(true);
                    }
                    
                    LocalDate dateNaissance = utilisateur.getDateNaissance();
                    comboBoxAnnee.setSelectedItem(dateNaissance.getYear()+"");
                    comboBoxMois.setSelectedItem(dateNaissance.getMonthValue()+"");
                    comboBoxJour.setSelectedItem(dateNaissance.getDayOfMonth()+"");
                    
                    Admin admin = controller.routeVersGetAdminByIdAdmin(utilisateur.getIdAdmin());
                    
                    comboBoxAdmin.setSelectedItem(admin.getIdAdmin() + " " + admin.getLogin());
                    
                } catch (SQLException ex) {
                    Logger.getLogger(JFrameSaveUtilisateur.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        
    }
    
    //Methode qui permet d'initialiser les comboBox et les radioButton
    private void initOtherComponents(){
        //Bouton radio femme selectionne par defaut
        radioButtonFeminin.setSelected(true);
        
        //Creation d'un objet Calendar pour gerer les dates
        Calendar calendrier = Calendar.getInstance();
        int currentYear = calendrier.get(Calendar.YEAR);
        
        //Initialisation des annees
        for(int i = currentYear; i >= 1900; i--){
            comboBoxAnnee.addItem(i+"");
        }
        
        //Initialisation des mois
        for(int i = 1; i <= 12; i++){
            comboBoxMois.addItem(i+"");
        }
        
        //Initialisation des jours
        for(int i = 1; i <= 31; i++){
            comboBoxJour.addItem(i+"");
        }
        
        //Initialisation du combo box pour idAdmin
        try {
            for(Admin admin: controller.routeVerslistAllAdmin()){ 
                comboBoxAdmin.addItem(admin.getIdAdmin() + " " + admin.getLogin());
                        }
        } catch (SQLException ex) {
            Logger.getLogger(JFrameSaveUtilisateur.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        champLogin = new javax.swing.JTextField();
        champNom = new javax.swing.JTextField();
        champPassword = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        champPrenom = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        boutonCancel = new javax.swing.JButton();
        boutonAdd = new javax.swing.JButton();
        comboBoxAnnee = new javax.swing.JComboBox<>();
        comboBoxMois = new javax.swing.JComboBox<>();
        comboBoxJour = new javax.swing.JComboBox<>();
        radioButtonFeminin = new javax.swing.JRadioButton();
        radioButtonMasculin = new javax.swing.JRadioButton();
        comboBoxAdmin = new javax.swing.JComboBox<>();
        buttonDelete = new javax.swing.JButton();
        buttonUpdate = new javax.swing.JButton();
        labelIdUser = new javax.swing.JLabel();
        champIdUser = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel5.setText("Date de naissance");

        jLabel6.setText("genre");

        jLabel7.setText("idAdmin");

        jLabel1.setText("Login");

        jLabel2.setText("Password");

        jLabel3.setText("Nom");

        jLabel4.setText("Prénom");

        boutonCancel.setText("Cancel");
        boutonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonCancelActionPerformed(evt);
            }
        });

        boutonAdd.setText("Add");
        boutonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonAddActionPerformed(evt);
            }
        });

        comboBoxAnnee.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxAnneeItemStateChanged(evt);
            }
        });

        comboBoxMois.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxMoisItemStateChanged(evt);
            }
        });

        radioButtonFeminin.setText("Féminin");

        radioButtonMasculin.setText("Masculin");

        buttonDelete.setText("Delete");
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });

        buttonUpdate.setText("Update");
        buttonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUpdateActionPerformed(evt);
            }
        });

        labelIdUser.setText("idUser");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboBoxAnnee, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(comboBoxMois, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboBoxJour, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(52, 52, 52)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(champNom, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(champPrenom, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(champPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(champLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(boutonCancel)
                            .addComponent(labelIdUser, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(buttonDelete)
                                .addGap(28, 28, 28)
                                .addComponent(buttonUpdate)
                                .addGap(34, 34, 34)
                                .addComponent(boutonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(radioButtonFeminin, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(radioButtonMasculin, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(champIdUser, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(comboBoxAdmin, javax.swing.GroupLayout.Alignment.LEADING, 0, 192, Short.MAX_VALUE)))))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(champLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(champPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(champNom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(champPrenom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(comboBoxAnnee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxMois, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxJour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(radioButtonFeminin)
                    .addComponent(radioButtonMasculin))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(comboBoxAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelIdUser)
                    .addComponent(champIdUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(boutonCancel)
                    .addComponent(buttonDelete)
                    .addComponent(buttonUpdate)
                    .addComponent(boutonAdd))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void boutonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonAddActionPerformed
        
        try {
            //Creation d'un objet Calendar pour gerer les dates
            Calendar calendrier = Calendar.getInstance();
            int currentYear = calendrier.get(Calendar.YEAR);
            
            String login = champLogin.getText();
            String password = champPassword.getText();
            String nom = champNom.getText();
            String prenom = champPrenom.getText();
            String genre = radioButtonFeminin.getText();
            

            if(radioButtonMasculin.isSelected()){
                genre = radioButtonMasculin.getText();
            }
            
            //Date de naissance
            int annee = Integer.parseInt(comboBoxAnnee.getSelectedItem().toString());
            int mois = Integer.parseInt(comboBoxMois.getSelectedItem().toString());
            int jour = Integer.parseInt(comboBoxJour.getSelectedItem().toString());
            LocalDate dateNaissance = LocalDate.of(annee, mois, jour);
           
            //idAdmin
            String idAdminString = comboBoxAdmin.getSelectedItem().toString().split(" ")[0];
            int idAdmin = Integer.parseInt(idAdminString);
            
            if(login.equals("") || password.equals("")|| nom.equals("") || prenom.equals("")){
                JOptionPane.showMessageDialog(null,"Veuillez completer les informations manquantes");
            }
            else{
                //Enregistrement grace au controleur
                controller.routeVersSaveUtilisateur(login, password, nom, prenom, dateNaissance, genre, idAdmin);


                champLogin.setText("");
                champPassword.setText("");
                champNom.setText("");
                champPrenom.setText("");
                comboBoxAnnee.setSelectedItem(currentYear+"");
                comboBoxMois.setSelectedItem(1+"");
                comboBoxJour.setSelectedItem(1+"");
                radioButtonMasculin.setSelected(false);
                radioButtonFeminin.setSelected(true);
                
                this.dispose();
                
                refreshTable();
            }     
        } catch (SQLException ex) {
            Logger.getLogger(JFrameSaveUtilisateur.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Veuillez réessayer plus tard");
        }
    }//GEN-LAST:event_boutonAddActionPerformed

    private void boutonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_boutonCancelActionPerformed

    private void comboBoxMoisItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxMoisItemStateChanged
        comboBoxJour.removeAllItems();
        //Creation d'un objet Calendar pour gerer les dates
        Calendar calendrier = Calendar.getInstance();
        
        int annee = Integer.parseInt(comboBoxAnnee.getSelectedItem().toString());
        int mois = Integer.parseInt(comboBoxMois.getSelectedItem().toString());
        
        calendrier.set(Calendar.YEAR, annee);
        calendrier.set(Calendar.MONTH, mois-1);
        
        int nombreJoursMois = calendrier.getActualMaximum(Calendar.DAY_OF_MONTH);
        
        //Remplissage du comboBoxJour
        for(int i = 1; i <= nombreJoursMois; i++){
            comboBoxJour.addItem(i+"");
        }
    }//GEN-LAST:event_comboBoxMoisItemStateChanged

    private void comboBoxAnneeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxAnneeItemStateChanged

        comboBoxMois.setSelectedItem(1+"");
        comboBoxJour.setSelectedItem(1+"");
        
    }//GEN-LAST:event_comboBoxAnneeItemStateChanged

    private void buttonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUpdateActionPerformed
            String idUserString = champIdUser.getText();
            int idUser;
            
            try{
                idUser = Integer.parseInt(idUserString);
            }catch(NumberFormatException ex){
                Logger.getLogger(JFrameSaveAdmin.class.getName()).log(Level.SEVERE,null, ex);
                JOptionPane.showMessageDialog(null, "Veuillez saisir un id correct");
                return;
            }
            
            try {
            //Creation d'un objet Calendar pour gerer les dates
            Calendar calendrier = Calendar.getInstance();
            int currentYear = calendrier.get(Calendar.YEAR);
            
            String login = champLogin.getText();
            String password = champPassword.getText();
            String nom = champNom.getText();
            String prenom = champPrenom.getText();
            String genre = radioButtonFeminin.getText();
            

            if(radioButtonMasculin.isSelected()){
                genre = radioButtonMasculin.getText();
            }
            
            //Date de naissance
            int annee = Integer.parseInt(comboBoxAnnee.getSelectedItem().toString());
            int mois = Integer.parseInt(comboBoxMois.getSelectedItem().toString());
            int jour = Integer.parseInt(comboBoxJour.getSelectedItem().toString());
            LocalDate dateNaissance = LocalDate.of(annee, mois, jour);
           
            //idAdmin
            String idAdminString = comboBoxAdmin.getSelectedItem().toString().split(" ")[0];
            int idAdmin = Integer.parseInt(idAdminString);
            
            if(login.equals("") || password.equals("")|| nom.equals("") || prenom.equals("")){
                JOptionPane.showMessageDialog(null,"Veuillez completer les informations manquantes");
            }
            else{
                //Update
                controller.routeVersUpdateUtilisateur(idUser, login, password, nom, prenom, dateNaissance, genre, idAdmin);

                champLogin.setText("");
                champPassword.setText("");
                champNom.setText("");
                champPrenom.setText("");
                comboBoxAnnee.setSelectedItem(currentYear+"");
                comboBoxMois.setSelectedItem(1+"");
                comboBoxJour.setSelectedItem(1+"");
                radioButtonMasculin.setSelected(false);
                radioButtonFeminin.setSelected(true);
                
                this.dispose();
                
                refreshTable();
            }     
        } catch (SQLException ex) {
            Logger.getLogger(JFrameSaveUtilisateur.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Veuillez réessayer plus tard");
        }
    }//GEN-LAST:event_buttonUpdateActionPerformed

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
        String idUserString = champIdUser.getText();
        int idUser = Integer.parseInt(idUserString);
        
        try {
            //Suppression de l'utilisateur
            controller.routeVersDeleteUtilisateur(idUser);
            this.dispose();
            refreshTable();
        } catch (SQLException ex) {
            Logger.getLogger(JFrameSaveUtilisateur.class.getName()).log(Level.SEVERE, null, ex);
        }       
    }//GEN-LAST:event_buttonDeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameSaveUtilisateur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameSaveUtilisateur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameSaveUtilisateur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameSaveUtilisateur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameSaveUtilisateur("Add",0,null).setVisible(true);
            }
        });
    }
    
    private void refreshTable() throws SQLException{
         List<Utilisateur> listUtilisateur = controller.routeVersAllUtilisateur();
            
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("Id");
            model.addColumn("Nom");
            model.addColumn("Prenom");
            model.addColumn("Date de naissance");
            model.addColumn("Genre");
            model.addColumn("Login");
            model.addColumn("Password");
            model.addColumn("IdAdmin");
            
            for(Utilisateur utilisateur : listUtilisateur){
                model.addRow(new String[]{utilisateur.getIdUser()+"", utilisateur.getNom(), utilisateur.getPrenom(), utilisateur.getDateNaissance().toString(),utilisateur.getGenre(), utilisateur.getLogin(), utilisateur.getPassword(), utilisateur.getIdAdmin()+""});
            }
            
            homePage.getTable().setModel(model);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton boutonAdd;
    private javax.swing.JButton boutonCancel;
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonUpdate;
    private javax.swing.JTextField champIdUser;
    private javax.swing.JTextField champLogin;
    private javax.swing.JTextField champNom;
    private javax.swing.JPasswordField champPassword;
    private javax.swing.JTextField champPrenom;
    private javax.swing.JComboBox<String> comboBoxAdmin;
    private javax.swing.JComboBox<String> comboBoxAnnee;
    private javax.swing.JComboBox<String> comboBoxJour;
    private javax.swing.JComboBox<String> comboBoxMois;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel labelIdUser;
    private javax.swing.JRadioButton radioButtonFeminin;
    private javax.swing.JRadioButton radioButtonMasculin;
    // End of variables declaration//GEN-END:variables

    
}
